spring.application.name=inventory-service

server.port = 8082

#DB configurations
spring.datasource.username = root
spring.datasource.password = home
spring.datasource.url = jdbc:mysql://localhost:3306/real_time
spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#kafka configurations
#consumer
spring.kafka.bootstrap-servers = localhost:9092
spring.kafka.consumer.group-id = inventory-group
spring.kafka.consumer.auto-offset-reset = earliest
spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer = org.springframework.kafka.support.serializer.JsonDeserializer
#This tells the deserializer to trust any package, allowing it to process the incoming JSON
spring.kafka.consumer.properties.spring.json.trusted.packages=*

#producer
spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer = org.springframework.kafka.support.serializer.JsonSerializer

# Will tell Kafka to always deserialize the JSON message as the local Order class
spring.kafka.consumer.properties.spring.json.value.default.type=com.inventory_service.dto.Order

#This will prevent the JSON message from including the class name com.Order_service.entity.Order
spring.kafka.producer.properties.spring.json.add.type.headers=false
